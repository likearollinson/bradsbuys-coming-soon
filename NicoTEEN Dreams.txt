// NiCKoTEEn dreams - GBA MMORPG ROM
// Multiplayer pirate surfing adventure with Link Cable support

#include <gba.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ===== NETWORK CONSTANTS =====
#define MAX_PLAYERS 4
#define PACKET_SIZE 32
#define SYNC_INTERVAL 5
#define SERVER_TIMEOUT 300

// ===== GAME CONSTANTS =====
#define SCREEN_WIDTH 240
#define SCREEN_HEIGHT 160
#define WORLD_WIDTH 512
#define WORLD_HEIGHT 512
#define CHUNK_SIZE 64

#define PLAYER_SPEED 2
#define GRAVITY 1
#define JUMP_STRENGTH 8
#define WATER_LEVEL 120

// ===== MULTIPLAYER STRUCTURES =====
typedef struct {
u8 type;        // Packet type
u8 playerId;    // Sender ID
s16 x, y;       // Position
s16 vx, vy;     // Velocity
u8 mode;        // Game mode
u8 action;      // Current action
u16 health;     // Health
u16 score;      // Score
u8 checksum;    // Error checking
} NetworkPacket;

typedef struct {
u8 id;
s16 x, y;
s16 vx, vy;
u8 frame;
u16 health;
u8 mode;
u8 wheels;
u8 weapons;
bool active;
bool isLocal;
char name[8];
u16 score;
u8 lastSync;
} NetworkPlayer;

typedef struct {
s16 x, y;
u8 type;
u8 ownerId;     // Which player spawned it
bool active;
u8 frame;
u16 data;       // Extra data
} WorldObject;

typedef struct {
s16 x, y;
u8 damage;
u8 ownerId;
s16 vx, vy;
bool active;
u8 lifetime;
} Projectile;

// ===== GUILD SYSTEM =====
typedef struct {
char name[12];
u8 members[MAX_PLAYERS];
u8 memberCount;
u16 totalScore;
u8 level;
} Guild;

// ===== GLOBAL VARIABLES =====
NetworkPlayer players[MAX_PLAYERS];
WorldObject worldObjects[128];
Projectile projectiles[32];
Guild guilds[8];
u8 localPlayerId = 0;
u8 playerCount = 1;
bool isServer = false;
bool isConnected = false;

// Network buffers
NetworkPacket sendBuffer;
NetworkPacket receiveBuffer;
u8 syncTimer = 0;
u8 connectionTimer = 0;

// World state
s16 cameraX = 0, cameraY = 0;
u8 currentChunk = 0;
bool worldLoaded[64] = {false}; // Track loaded chunks

// Game state
u8 gameMode = 0; // 0=menu, 1=lobby, 2=playing, 3=guild
u16 globalScore = 0;
u8 waveTimer = 0;

// ===== PACKET TYPES =====
#define PACKET_PLAYER_UPDATE    0x01
#define PACKET_OBJECT_SPAWN     0x02
#define PACKET_OBJECT_DESTROY   0x03
#define PACKET_PROJECTILE_FIRE  0x04
#define PACKET_CHAT_MESSAGE     0x05
#define PACKET_GUILD_CREATE     0x06
#define PACKET_GUILD_JOIN       0x07
#define PACKET_PLAYER_JOIN      0x08
#define PACKET_PLAYER_LEAVE     0x09
#define PACKET_WORLD_UPDATE     0x0A

// ===== SPRITE DATA =====
const u32 playerSprites[256] = {
// Player 1 - Red bandana
0x00000000, 0x00111000, 0x01122110, 0x12233221,
0x12277221, 0x01122110, 0x00111000, 0x00000000,

```
// Player 2 - Blue bandana  
0x00000000, 0x00111000, 0x01122110, 0x12233221,
0x12244221, 0x01122110, 0x00111000, 0x00000000,

// Player 3 - Green bandana
0x00000000, 0x00111000, 0x01122110, 0x12233221,
0x12255221, 0x01122110, 0x00111000, 0x00000000,

// Player 4 - Yellow bandana
0x00000000, 0x00111000, 0x01122110, 0x12233221,
0x12266221, 0x01122110, 0x00111000, 0x00000000,

// Animation frames for each mode...
```

};

const u32 worldTiles[512] = {
// Ocean tiles with animation
0x11111111, 0x22222222, 0x33333333, 0x22222222,
// Island tiles
0x44444444, 0x45555554, 0x56666665, 0x56777765,
// Treasure, wheels, weapons, zombiesâ€¦
};

// ===== NETWORK FUNCTIONS =====
void initNetwork(void) {
REG_RCNT = R_NORMAL;
REG_SIOCNT = SIO_NORMAL_32 | SIO_IRQ_ENABLE | SIO_START;

```
// Try to detect if we're master (server)
if(REG_SIOCNT & SIO_SI_STATE) {
    isServer = true;
    localPlayerId = 0;
} else {
    isServer = false;
    // Wait for server assignment
}
```

}

void sendPacket(NetworkPacket* packet) {
if(!isConnected) return;

```
packet->playerId = localPlayerId;
packet->checksum = calculateChecksum((u8*)packet, PACKET_SIZE - 1);

REG_SIODATA32 = *(u32*)packet;
REG_SIOCNT |= SIO_START;
```

}

bool receivePacket(NetworkPacket* packet) {
if(!(REG_SIOCNT & SIO_RECV_COMPLETE)) return false;

```
*(u32*)packet = REG_SIODATA32;

// Verify checksum
u8 checksum = calculateChecksum((u8*)packet, PACKET_SIZE - 1);
if(checksum != packet->checksum) return false;

return true;
```

}

u8 calculateChecksum(u8* data, u8 length) {
u8 sum = 0;
for(u8 i = 0; i < length; i++) {
sum ^= data[i];
}
return sum;
}

void handleNetworkPacket(NetworkPacket* packet) {
switch(packet->type) {
case PACKET_PLAYER_UPDATE:
updateRemotePlayer(packet);
break;

```
    case PACKET_OBJECT_SPAWN:
        spawnNetworkObject(packet->x, packet->y, packet->action, packet->playerId);
        break;
        
    case PACKET_OBJECT_DESTROY:
        destroyNetworkObject(packet->x, packet->y);
        break;
        
    case PACKET_PROJECTILE_FIRE:
        fireNetworkProjectile(packet);
        break;
        
    case PACKET_PLAYER_JOIN:
        addNetworkPlayer(packet);
        break;
        
    case PACKET_PLAYER_LEAVE:
        removeNetworkPlayer(packet->playerId);
        break;
        
    case PACKET_GUILD_CREATE:
        createNetworkGuild(packet);
        break;
}
```

}

// ===== PLAYER MANAGEMENT =====
void initPlayers(void) {
for(u8 i = 0; i < MAX_PLAYERS; i++) {
players[i].active = false;
players[i].id = i;
}

```
// Initialize local player
NetworkPlayer* player = &players[localPlayerId];
player->active = true;
player->isLocal = true;
player->x = 120 + (localPlayerId * 20);
player->y = 80;
player->health = 100;
player->mode = 0; // Swimming
player->score = 0;
strcpy(player->name, "PLAYER");
player->name[6] = '1' + localPlayerId;
player->name[7] = '\0';
```

}

void updateRemotePlayer(NetworkPacket* packet) {
if(packet->playerId >= MAX_PLAYERS) return;

```
NetworkPlayer* player = &players[packet->playerId];
player->active = true;
player->x = packet->x;
player->y = packet->y;
player->vx = packet->vx;
player->vy = packet->vy;
player->mode = packet->mode;
player->health = packet->health;
player->score = packet->score;
player->lastSync = 0;
```

}

void broadcastPlayerUpdate(void) {
if(!isConnected) return;

```
NetworkPlayer* player = &players[localPlayerId];

sendBuffer.type = PACKET_PLAYER_UPDATE;
sendBuffer.x = player->x;
sendBuffer.y = player->y;
sendBuffer.vx = player->vx;
sendBuffer.vy = player->vy;
sendBuffer.mode = player->mode;
sendBuffer.action = 0;
sendBuffer.health = player->health;
sendBuffer.score = player->score;

sendPacket(&sendBuffer);
```

}

// ===== WORLD MANAGEMENT =====
void loadWorldChunk(u8 chunkId) {
if(worldLoaded[chunkId]) return;

```
// Clear objects in this chunk
for(u8 i = 0; i < 128; i++) {
    if(!worldObjects[i].active) continue;
    
    u8 objChunk = (worldObjects[i].x / CHUNK_SIZE) + 
                  (worldObjects[i].y / CHUNK_SIZE) * 8;
    if(objChunk == chunkId) {
        worldObjects[i].active = false;
    }
}

// Generate new objects based on chunk type
s16 chunkX = (chunkId % 8) * CHUNK_SIZE;
s16 chunkY = (chunkId / 8) * CHUNK_SIZE;

// Procedural generation based on chunk coordinates
u8 seed = chunkX + chunkY * 7 + 42;

for(u8 i = 0; i < 8; i++) {
    seed = (seed * 13 + 7) % 255;
    
    if(seed < 50) { // 20% chance for treasure
        spawnWorldObject(chunkX + (seed % CHUNK_SIZE), 
                       chunkY + ((seed * 3) % CHUNK_SIZE), 0, 255);
    } else if(seed < 80) { // 12% chance for zombie
        spawnWorldObject(chunkX + (seed % CHUNK_SIZE), 
                       chunkY + ((seed * 5) % CHUNK_SIZE), 3, 255);
    } else if(seed < 100) { // 8% chance for wheel
        spawnWorldObject(chunkX + (seed % CHUNK_SIZE), 
                       chunkY + ((seed * 7) % CHUNK_SIZE), 1, 255);
    }
}

worldLoaded[chunkId] = true;
```

}

void spawnWorldObject(s16 x, s16 y, u8 type, u8 ownerId) {
for(u8 i = 0; i < 128; i++) {
if(!worldObjects[i].active) {
worldObjects[i].x = x;
worldObjects[i].y = y;
worldObjects[i].type = type;
worldObjects[i].ownerId = ownerId;
worldObjects[i].active = true;
worldObjects[i].frame = 0;

```
        // Broadcast to other players if we're server
        if(isServer && ownerId == 255) {
            sendBuffer.type = PACKET_OBJECT_SPAWN;
            sendBuffer.x = x;
            sendBuffer.y = y;
            sendBuffer.action = type;
            sendBuffer.playerId = localPlayerId;
            sendPacket(&sendBuffer);
        }
        break;
    }
}
```

}

// ===== COMBAT SYSTEM =====
void fireProjectile(s16 x, s16 y, s16 vx, s16 vy, u8 damage) {
for(u8 i = 0; i < 32; i++) {
if(!projectiles[i].active) {
projectiles[i].x = x;
projectiles[i].y = y;
projectiles[i].vx = vx;
projectiles[i].vy = vy;
projectiles[i].damage = damage;
projectiles[i].ownerId = localPlayerId;
projectiles[i].active = true;
projectiles[i].lifetime = 120; // 2 seconds

```
        // Broadcast projectile
        sendBuffer.type = PACKET_PROJECTILE_FIRE;
        sendBuffer.x = x;
        sendBuffer.y = y;
        sendBuffer.vx = vx;
        sendBuffer.vy = vy;
        sendBuffer.action = damage;
        sendPacket(&sendBuffer);
        break;
    }
}
```

}

void updateProjectiles(void) {
for(u8 i = 0; i < 32; i++) {
if(!projectiles[i].active) continue;

```
    projectiles[i].x += projectiles[i].vx;
    projectiles[i].y += projectiles[i].vy;
    projectiles[i].lifetime--;
    
    if(projectiles[i].lifetime == 0) {
        projectiles[i].active = false;
        continue;
    }
    
    // Check collision with players
    for(u8 j = 0; j < MAX_PLAYERS; j++) {
        if(!players[j].active || j == projectiles[i].ownerId) continue;
        
        if(abs(players[j].x - projectiles[i].x) < 8 && 
           abs(players[j].y - projectiles[i].y) < 8) {
            
            players[j].health -= projectiles[i].damage;
            projectiles[i].active = false;
            
            if(j == localPlayerId) {
                // We got hit, broadcast health update
                broadcastPlayerUpdate();
            }
            break;
        }
    }
}
```

}

// ===== GUILD SYSTEM =====
void createGuild(char* guildName) {
for(u8 i = 0; i < 8; i++) {
if(guilds[i].memberCount == 0) {
strcpy(guilds[i].name, guildName);
guilds[i].members[0] = localPlayerId;
guilds[i].memberCount = 1;
guilds[i].totalScore = players[localPlayerId].score;
guilds[i].level = 1;

```
        // Broadcast guild creation
        sendBuffer.type = PACKET_GUILD_CREATE;
        sendBuffer.x = i; // Guild ID
        sendBuffer.y = localPlayerId;
        sendPacket(&sendBuffer);
        break;
    }
}
```

}

void updateGuilds(void) {
for(u8 i = 0; i < 8; i++) {
if(guilds[i].memberCount == 0) continue;

```
    // Update total score
    guilds[i].totalScore = 0;
    for(u8 j = 0; j < guilds[i].memberCount; j++) {
        u8 memberId = guilds[i].members[j];
        if(players[memberId].active) {
            guilds[i].totalScore += players[memberId].score;
        }
    }
    
    // Level up guild based on total score
    guilds[i].level = (guilds[i].totalScore / 1000) + 1;
    if(guilds[i].level > 10) guilds[i].level = 10;
}
```

}

// ===== MAIN GAME FUNCTIONS =====
int main(void) {
// Initialize GBA
REG_DISPCNT = MODE_0 | BG0_ENABLE | BG1_ENABLE | OBJ_ENABLE | OBJ_1D_MAP;

```
// Load graphics
dmaCopy(playerSprites, &TILE_BASE_ADR(4)[0], sizeof(playerSprites));
dmaCopy(worldTiles, &TILE_BASE_ADR(0)[0], sizeof(worldTiles));

// Initialize systems
initNetwork();
initPlayers();

// Game loop
while(1) {
    VBlankIntrWait();
    
    // Handle network
    if(receivePacket(&receiveBuffer)) {
        handleNetworkPacket(&receiveBuffer);
    }
    
    updateGame();
    renderGame();
    
    syncTimer++;
    if(syncTimer >= SYNC_INTERVAL) {
        syncTimer = 0;
        broadcastPlayerUpdate();
    }
}

return 0;
```

}

void updateGame(void) {
if(gameMode != 2) return; // Only update during gameplay

```
updateLocalPlayer();
updateProjectiles();
updateWorldObjects();
updateCamera();
updateGuilds();

// Check if we need to load new chunks
u8 playerChunk = (players[localPlayerId].x / CHUNK_SIZE) + 
                 (players[localPlayerId].y / CHUNK_SIZE) * 8;

if(playerChunk != currentChunk) {
    loadWorldChunk(playerChunk);
    currentChunk = playerChunk;
    
    // Load adjacent chunks
    for(s8 dx = -1; dx <= 1; dx++) {
        for(s8 dy = -1; dy <= 1; dy++) {
            u8 adjChunk = playerChunk + dx + (dy * 8);
            if(adjChunk < 64) {
                loadWorldChunk(adjChunk);
            }
        }
    }
}
```

}

void updateLocalPlayer(void) {
NetworkPlayer* player = &players[localPlayerId];
u16 keys = keysHeld();

```
// Movement (similar to single player but networked)
if(keys & KEY_LEFT) player->vx = -PLAYER_SPEED;
else if(keys & KEY_RIGHT) player->vx = PLAYER_SPEED;
else player->vx = 0;

if(keys & KEY_UP) player->vy = -PLAYER_SPEED;
else if(keys & KEY_DOWN) player->vy = PLAYER_SPEED;
else player->vy = 0;

// Combat
if(keysDown() & KEY_A && player->weapons > 0) {
    s16 targetX = player->x + (player->vx * 10);
    s16 targetY = player->y + (player->vy * 10);
    fireProjectile(player->x, player->y, 
                  targetX - player->x, targetY - player->y, 25);
    player->weapons--;
}

// Apply movement
player->x += player->vx;
player->y += player->vy;

// Boundary checking
if(player->x < 0) player->x = 0;
if(player->x >= WORLD_WIDTH) player->x = WORLD_WIDTH - 1;
if(player->y < 0) player->y = 0;
if(player->y >= WORLD_HEIGHT) player->y = WORLD_HEIGHT - 1;

player->frame = (player->frame + 1) % 16;
```

}

void updateCamera(void) {
NetworkPlayer* player = &players[localPlayerId];

```
cameraX = player->x - SCREEN_WIDTH / 2;
cameraY = player->y - SCREEN_HEIGHT / 2;

if(cameraX < 0) cameraX = 0;
if(cameraY < 0) cameraY = 0;
if(cameraX > WORLD_WIDTH - SCREEN_WIDTH) cameraX = WORLD_WIDTH - SCREEN_WIDTH;
if(cameraY > WORLD_HEIGHT - SCREEN_HEIGHT) cameraY = WORLD_HEIGHT - SCREEN_HEIGHT;
```

}

void renderGame(void) {
// Clear sprites
for(u8 i = 0; i < 128; i++) {
SPRITE_GFX[i].attr0 = ATTR0_DISABLED;
}

```
u8 spriteIndex = 0;

// Render all players
for(u8 i = 0; i < MAX_PLAYERS; i++) {
    if(!players[i].active || spriteIndex >= 128) continue;
    
    s16 screenX = players[i].x - cameraX;
    s16 screenY = players[i].y - cameraY;
    
    if(screenX >= -16 && screenX < SCREEN_WIDTH + 16 && 
       screenY >= -16 && screenY < SCREEN_HEIGHT + 16) {
        
        SPRITE_GFX[spriteIndex].attr0 = ATTR0_NORMAL | ATTR0_COLOR_16 | 
                                        OBJ_Y(screenY - 8);
        SPRITE_GFX[spriteIndex].attr1 = ATTR1_SIZE_8 | OBJ_X(screenX - 4);
        SPRITE_GFX[spriteIndex].attr2 = ATTR2_PALETTE(i) | 
                                        ATTR2_ID(i * 16 + (players[i].frame / 4));
        spriteIndex++;
    }
}

// Render projectiles
for(u8 i = 0; i < 32; i++) {
    if(!projectiles[i].active || spriteIndex >= 128) continue;
    
    s16 screenX = projectiles[i].x - cameraX;
    s16 screenY = projectiles[i].y - cameraY;
    
    if(screenX >= 0 && screenX < SCREEN_WIDTH && 
       screenY >= 0 && screenY < SCREEN_HEIGHT) {
        
        SPRITE_GFX[spriteIndex].attr0 = ATTR0_NORMAL | ATTR0_COLOR_16 | 
                                        OBJ_Y(screenY);
        SPRITE_GFX[spriteIndex].attr1 = ATTR1_SIZE_8 | OBJ_X(screenX);
        SPRITE_GFX[spriteIndex].attr2 = ATTR2_PALETTE(4) | ATTR2_ID(192);
        spriteIndex++;
    }
}

// Render world objects
for(u8 i = 0; i < 128; i++) {
    if(!worldObjects[i].active || spriteIndex >= 128) continue;
    
    s16 screenX = worldObjects[i].x - cameraX;
    s16 screenY = worldObjects[i].y - cameraY;
    
    if(screenX >= -16 && screenX < SCREEN_WIDTH + 16 && 
       screenY >= -16 && screenY < SCREEN_HEIGHT + 16) {
        
        SPRITE_GFX[spriteIndex].attr0 = ATTR0_NORMAL | ATTR0_COLOR_16 | 
                                        OBJ_Y(screenY - 8);
        SPRITE_GFX[spriteIndex].attr1 = ATTR1_SIZE_8 | OBJ_X(screenX - 4);
        SPRITE_GFX[spriteIndex].attr2 = ATTR2_PALETTE(5) | 
                                        ATTR2_ID(200 + worldObjects[i].type * 4);
        spriteIndex++;
    }
}
```

}